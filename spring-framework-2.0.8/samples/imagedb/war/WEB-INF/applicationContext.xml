<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE beans PUBLIC "-//SPRING//DTD BEAN 2.0//EN" "http://www.springframework.org/dtd/spring-beans-2.0.dtd">

<!--
  - Middle tier application context definition for the image database.
  -->
<beans>

	<!-- Configurer that replaces ${...} placeholders with values from a properties file -->
	<!-- (in this case, JDBC-related settings for the dataSource definition below) -->
	<bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>WEB-INF/jdbc.properties</value>
				<value>WEB-INF/mail.properties</value>
			</list>
		</property>
	</bean>

	<!-- Local C3P0 DataSource that works in any environment -->
	<!-- See JPetStore for an example of using Apache Commons DBCP as alternative -->
	<!-- (Both DataSource implementations have a "close" method to be called on shutdown) -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
		<property name="driverClass" value="${jdbc.driverClassName}"/>
		<property name="jdbcUrl" value="${jdbc.url}"/>
		<property name="user" value="${jdbc.username}"/>
		<property name="password" value="${jdbc.password}"/>
	</bean>

	<!-- Transaction manager for a single JDBC DataSource -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- NativeJdbcExtractor for the C3P0 connection pool above -->
	<!-- (just needed for oracleLobHandler) -->
	<bean id="nativeJdbcExtractor" class="org.springframework.jdbc.support.nativejdbc.C3P0NativeJdbcExtractor"
			lazy-init="true"/>

	<!-- LobHandler for Oracle JDBC drivers -->
	<!-- (refers to the NativeJdbcExtractor above to get access to native OracleConnections) -->
	<bean id="oracleLobHandler" class="org.springframework.jdbc.support.lob.OracleLobHandler" lazy-init="true">
		<property name="nativeJdbcExtractor" ref="nativeJdbcExtractor"/>
	</bean>

	<!-- LobHandler for well-behaved JDBC drivers -->
	<!-- (simply delegating to corresponding PreparedStatement and ResultSet methods) -->
	<bean id="defaultLobHandler" class="org.springframework.jdbc.support.lob.DefaultLobHandler" lazy-init="true"/>

	<!-- Default implementation of the ImageDatabase business interface -->
	<!-- (refers to a LobHandler for handling BLOBs and CLOBs -->
	<bean id="imageDatabaseTarget" class="org.springframework.samples.imagedb.DefaultImageDatabase">
		<property name="dataSource" ref="dataSource"/>
		<property name="lobHandler" ref="${imageDatabase.lobHandler}"/>
	</bean>

	<!-- Transactional proxy for the business object above -->
	<bean id="imageDatabase" class="org.springframework.transaction.interceptor.TransactionProxyFactoryBean">
		<property name="transactionManager" ref="transactionManager"/>
		<property name="target" ref="imageDatabaseTarget"/>
		<property name="transactionAttributes">
			<props>
				<prop key="getImages">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="streamImage">PROPAGATION_REQUIRED,readOnly</prop>
				<prop key="storeImage">PROPAGATION_REQUIRED</prop>
				<prop key="clearDatabase">PROPAGATION_REQUIRED</prop>
			</props>
		</property>
	</bean>

	<!-- MailSender implementation for JavaMail -->
	<!-- Used by ListImagesQuartzJob and ListImagesTimerTask; see "scheduling-*.xml" -->
	<bean id="mailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="${mail.host}"/>
	</bean>

</beans>

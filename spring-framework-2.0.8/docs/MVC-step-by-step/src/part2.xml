<?xml version="1.0" encoding="UTF-8"?>
<chapter id="part2">
    <title>Developing and Configuring the Views and the Controller</title>
    <para>This is Part 2 of a step-by-step tutorial on how to develop a web
    application from scratch using the Spring Framework. In
    <link linkend="part1">Part 1</link> we configured the
    environment and set up a basic application that we will now flesh out.</para>
    <para>This is what we have implemented so far:</para>
    <itemizedlist>
		<listitem>
		  <para>An introduction page, <filename>'index.jsp'</filename>, the welcome page
		  of the application. It was used to test our setup was correct. We will later
		  change this to actually provide a link into our application.</para>
		</listitem>

		<listitem>
		  <para>A <classname>DispatcherServlet</classname> (front controller) with a corresponding
		  <filename>'springapp-servlet.xml'</filename> configuration file.</para>
		</listitem>

		<listitem>
		  <para>A page controller, <classname>HelloController</classname>, with limited
		  functionality â€“ it just returns a <classname>ModelAndView</classname>.
		  We currently have an empty model and will be providing a full model later on.</para>
		</listitem>

		<listitem>
		 <para>A unit test class for the page controller, <classname>HelloControllerTests</classname>,
		 to verify the name of the view is the one we expect.</para>
		</listitem>
		  
		<listitem>
		  <para>A view, <filename>'hello.jsp'</filename>, that again is extremely
		  basic. The good news is the whole setup works and we are now ready to add more
		  functionality.</para>
		</listitem>
    </itemizedlist>
    <section id="step2.1">
        <title>Configure JSTL</title>
        <para>We will be using the JSP Standard Tag Library (JSTL), so let's start by
        copying the JSTL files we need to our
        <filename class="directory">'WEB-INF/lib'</filename> directory. Copy
        <filename class="libraryfile">jstl.jar</filename> from the
        <filename class="directory">'spring-framework-2.0/lib/j2ee'</filename> directory and
        <filename class="libraryfile">standard.jar</filename> from the
        <filename class="directory">'spring-framework-2.0/lib/jakarta-taglibs'</filename>
        directory to the <filename class="directory">'springapp/war/WEB-INF/lib'</filename>
        directory.</para>
        <para>Create a <filename class="directory">'tld'</filename> directory below the
        <filename class="directory">WEB-INF</filename> directory. Then copy the tag library
        descriptors <filename class="libraryfile">'c.tld'</filename> and
        <filename class="libraryfile">'fmt.tld'</filename> from the Jakarta Commons tag library
        jar <filename class="libraryfile">'WEB-INF/lib/standard.jar'</filename> into the new
        directory called <filename class="directory">'WEB-INF/tld'</filename>.</para>
        <para>Next, we define the location of the tag libraries in 
        <filename class="libraryfile">'WEB-INF/web.xml'</filename> so that they can be used
        in the JSPs.</para>
        <para><filename>'WEB-INF/web.xml'</filename>:</para>
        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>
<web-app version="2.4"
         xmlns="http://java.sun.com/xml/ns/j2ee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://java.sun.com/xml/ns/j2ee 
         http://java.sun.com/xml/ns/j2ee/web-app_2_4.xsd" >

  <servlet>
    <servlet-name>springapp</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
    <load-on-startup>1</load-on-startup>
  </servlet>

  <servlet-mapping>
    <servlet-name>springapp</servlet-name>
    <url-pattern>*.htm</url-pattern>
  </servlet-mapping>

  <welcome-file-list>
    <welcome-file>
      index.jsp
    </welcome-file>
  </welcome-file-list>
]]>
  <emphasis role="bold"><![CDATA[<jsp-config>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/core</taglib-uri>
      <taglib-location>/WEB-INF/tld/c.tld</taglib-location>
    </taglib>
    <taglib>
      <taglib-uri>http://java.sun.com/jsp/jstl/fmt</taglib-uri>
      <taglib-location>/WEB-INF/tld/fmt.tld</taglib-location>
    </taglib>
  </jsp-config>]]></emphasis>
  
<![CDATA[</web-app>]]></programlisting>
        
        <para>We will be creating a 'header' file that will be included in every JSP
        page that we're going to write. We ensure the same definitions are included in all
        our JSPs simply by including the header file. We're also going to put all JSPs in
        a directory named <filename class="directory">'jsp'</filename> under the
	    <filename class="directory">'WEB-INF'</filename> directory. This will ensure that views
	    can only be accessed via the controller since it will not be not possible to access these 
	    pages directly via a URL. This strategy might not work in all application servers and if
	    this is the case with the one you are using, move the
	    <filename class="directory">'jsp'</filename> directory up a level. You would then use
	    <filename class="directory">'springapp/war/jsp'</filename> as the directory instead of
	    <filename class="directory">'springapp/war/WEB-INF/jsp'</filename> in all the code
	    examples that will follow.</para>
        
    </section>
    <section id="step2.2">
        <title>Update the views to use a header file</title>
        <para>First we create the header file for inclusion in all the JSPs we create.</para>
        <para><filename>'springapp/war/WEB-INF/jsp/include.jsp'</filename>:</para>
        <programlisting><![CDATA[<%@ page session="false"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<%@ taglib prefix="fmt" uri="http://java.sun.com/jsp/jstl/fmt" %>]]></programlisting>
        <para>Now we can update <filename>'index.jsp'</filename> to use this include file
        and since we are using JSTL, we can use the <literal>&lt;c:redirect/&gt;</literal>
        tag for redirecting to our front <interfacename>Controller</interfacename>.
        This means all requests for <filename>'index.jsp'</filename> will go
		through our application framework.</para>
        
        <para><filename>'springapp/war/index.jsp'</filename>:</para>
        <programlisting><![CDATA[<%@ include file="/WEB-INF/jsp/include.jsp" %>

]]><lineannotation>&lt;%-- Redirected because we can't set the welcome page to a virtual URL. --%&gt;</lineannotation><![CDATA[
<c:redirect url="/hello.htm"/>]]></programlisting>

        <para>Move <filename>hello.jsp</filename> to the <filename class="directory">'WEB-INF/jsp'</filename>
		directory. Add the same include directive we added to <filename>index.jsp</filename> to
		<filename>hello.jsp</filename>. We also add the current date and time as output to be
		retrieved from the model passed to the view which will be rendered using the JSTL
		&lt;c:out/&gt; tag.</para> 
		
		<para><filename>'springapp/war/WEB-INF/jsp/hello.jsp'</filename>:</para>
<programlisting><![CDATA[<%@ include file="/WEB-INF/jsp/include.jsp" %>

<html>
  <head><title>Hello :: Spring Application</title></head>
  <body>
    <h1>Hello - Spring Application</h1>
    <p>Greetings, it is now <c:out value="${now}"/></p>
  </body>
</html>]]></programlisting>
        
    </section>
    
    <section id="step2.3">
        <title>Improve the controller</title>
    
    	<para>Before we update the location of the JSP in our controller, let's update our unit test class first.
    	We know we need to update the view's resource reference with its new location
    	<filename>'WEB-INF/jsp/hello.jsp'</filename>. We also know there should be an object in the model
		mapped to the key <literal>"now"</literal>.</para>
    	
    	<para><filename>'springapp/tests/HelloControllerTests.java'</filename>:</para>
    	<programlisting><![CDATA[package springapp.web;
		
import org.springframework.web.servlet.ModelAndView;

import springapp.web.HelloController;
								
import junit.framework.TestCase;

public class HelloControllerTests extends TestCase {

    public void testHandleRequestView() throws Exception{		
        HelloController controller = new HelloController();
        ModelAndView modelAndView = controller.handleRequest(null, null);		
        assertEquals("WEB-INF/jsp/hello.jsp", modelAndView.getViewName());
        assertNotNull(modelAndView.getModel());
        String nowValue = (String) modelAndView.getModel().get("now");
        assertNotNull(nowValue);		
    }
}]]></programlisting>
    	
		<para>Next, we run the Ant <literal>'tests'</literal> target and our test should fail.</para>
		
		<programlisting><![CDATA[$ ant tests
Buildfile: build.xml

build:

buildtests:

tests:
    [junit] Running springapp.web.HelloControllerTests
    [junit] 14-Jul-2006 19:29:57 springapp.web.HelloController handleRequest
    [junit] INFO: Returning hello view with Fri Jul 14 19:29:57 BST 2006
    [junit] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 0.04 sec
    [junit] Testsuite: springapp.web.HelloControllerTests
    [junit] Tests run: 1, Failures: 1, Errors: 0, Time elapsed: 0.04 sec

    [junit] ------------- Standard Error -----------------
    [junit] 14-Jul-2006 19:29:57 springapp.web.HelloController handleRequest
    [junit] INFO: Returning hello view with Fri Jul 14 19:29:57 BST 2006
    [junit] ------------- ---------------- ---------------
    [junit] Testcase: testHandleRequestView(springapp.web.HelloControllerTests):        FAILED
    [junit] expected:<WEB-INF/jsp/...> but was:<...>
    [junit] junit.framework.ComparisonFailure: expected:<WEB-INF/jsp/...> but was:<...>
    [junit]     at springapp.web.HelloControllerTests.testHandleRequestView(HelloControllerTests.java:14)


    [junit] Test springapp.web.HelloControllerTests FAILED

BUILD FAILED
D:\Documents and Settings\Portia\workspace\springdev\springapp-part2\build.xml:102: tests.failed=true
            ***********************************************************
            ***********************************************************
            ****  One or more tests failed!  Check the output ...  ****
            ***********************************************************
            ***********************************************************

Total time: 1 second]]></programlisting>
		
        <para>Now we update <classname>HelloController</classname> by setting the view's
		resource reference to its new location <filename>'WEB-INF/jsp/hello.jsp'</filename>
		as well as set the key/value pair for the current date and time value in the model with
        the key identifier: <literal>"now"</literal> and the string value: <literal>'now'</literal>.</para>

        <para><filename>'springapp/src/springapp/web/HelloController.java'</filename>:</para>
        
        <programlisting><![CDATA[package springapp.web;

import org.springframework.web.servlet.mvc.Controller;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.IOException;
import java.util.Date;

public class HelloController implements Controller {

    protected final Log logger = LogFactory.getLog(getClass());

    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

    	String now = (new Date()).toString();
        logger.info("Returning hello view with " + now);

        return new ModelAndView("WEB-INF/jsp/hello.jsp", "now", now);
    }

}]]></programlisting>

        <para>We rerun our <literal>'tests'</literal> target and the test passes.</para>
				
        <para>Remember that the <interfacename>Controller</interfacename> has already been
        configured in <filename>'springapp-servlet.xml'</filename> file, so we are ready
        to try out our enhancements after we build and deploy this new code. When we
        enter <ulink url="http://localhost:8080/springapp/">http://localhost:8080/springapp/</ulink>
        in a browser, it should pull up the welcome file <filename>'index.jsp'</filename>, which should
        redirect to <filename>'hello.htm'</filename> and is handled by the
        <literal>DispatcherServlet</literal>, which in turn delegates our request to
        the page controller that puts the date and time in the model and then makes the model available
        to the view <filename>'hello.jsp'</filename>.</para>
        
        <screenshot>
		    <mediaobject>
			    <imageobject role="fo">
				    <imagedata fileref="images/screen3.png" format="PNG" align="center" />
			    </imageobject>
			    <imageobject role="html">
				    <imagedata fileref="images/screen3.png" format="PNG" align="center" />
			    </imageobject>
			    <caption>
				    <para>The updated application</para>
			    </caption>
		    </mediaobject>
	    </screenshot>
        
    </section>
    
    <section id="step2.4">
        <title>Decouple the view from the controller</title>
        <para>Right now the controller specifies the full path of the view, which creates an
        unnecessary dependency between the controller and the view. Ideally we would like to
        map to the view using a logical name, allowing us to switch the view without having
        to change the controller. You can set this mapping in a properties file if you like
        using a <classname>ResourceBundleViewResolver</classname> and a
        <classname>SimpleUrlHandlerMapping</classname> class. For the basic mapping of a view to
        a location, simply set a prefix and a suffix on the
        <classname>InternalResourceViewResolver</classname>. This second approach is the one that
        we will implement now, so we modify the <filename>'springapp-servlet.xml'</filename> and
        declare a <literal>'viewResolver'</literal> entry. By choosing the 
        <classname>JstlView</classname>, it will enable us to use JSTL in combination with
        message resource bundles as well as provide us with the support for internationalization.</para>
        <para><filename>'springapp/war/WEB-INF/springapp-servlet.xml'</filename>:</para>
        <programlisting><![CDATA[<?xml version="1.0" encoding="UTF-8"?>

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans-2.0.xsd">]]>
    
    <lineannotation>&lt;!-- the application context definition for the springapp DispatcherServlet --&gt;</lineannotation>
            
    <![CDATA[
    <bean name="/hello.htm" class="springapp.web.HelloController"/>]]>
    
    <emphasis role="bold"><![CDATA[
    <bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="viewClass" value="org.springframework.web.servlet.view.JstlView"></property>
        <property name="prefix" value="/WEB-INF/jsp/"></property>
        <property name="suffix" value=".jsp"></property>        
    </bean>]]></emphasis><![CDATA[
            
</beans>]]></programlisting>
                
        <para>We update the view name in the controller test class <filename class="libraryfile">
		'HelloControllerTests'</filename> to <literal>'hello'</literal> and rerun the test
		to check it fails.</para>
			
		<para><filename>'springapp/test/springapp/web/HelloControllerTests.java'</filename>:</para>
		
		<programlisting><![CDATA[assertEquals("hello", modelAndView.getViewName());
]]></programlisting>
			
		<para>We then remove the prefix and suffix from the view name in the controller, leaving the
        controller to reference the view by its logical name <literal>"hello".</literal></para>
        
        <para><filename>'springapp/src/springapp/web/HelloController.java'</filename>:</para>
        <programlisting><![CDATA[package springapp.web;

import org.springframework.web.servlet.mvc.Controller;
import org.springframework.web.servlet.ModelAndView;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.IOException;
import java.util.Date;

public class HelloController implements Controller {

    protected final Log logger = LogFactory.getLog(getClass());

    public ModelAndView handleRequest(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

    	String now = (new Date()).toString();
        logger.info("Returning hello view with " + now);

        return new ModelAndView("hello", "now", now);
    }

}]]></programlisting>

		<para>Rerun the test and it should now pass.</para>
		
        <para>Let's compile and deploy the application and verify the application still works.</para>

    </section>
    
  <section>
    <title>Summary</title>

    <para>Let's take quick look at what we have created in Part 2. </para>

	<orderedlist>
		<listitem>
		  <para>A header file <filename>'include.jsp'</filename>, the JSP that contains the taglib
		  directives for the tag libraries we'll be using in our JSPs.</para>
		</listitem>
	</orderedlist>
	
	  
    <para>These are the existing artifacts we have changed in Part 2.</para>
	  	  
	<orderedlist>			
		<listitem>
		  <para>The <classname>HelloControllerTests</classname> has been updated repeatedly as
		  we make the controller reference the logical name of a view instead of its hardcoded
		  name and location.</para>
		</listitem>

		<listitem>
		  <para>The page controller, <classname>HelloController</classname>, now references
		  the view by its logical view name through the use of the 
		  <classname>'InternalResourceViewResolver'</classname> defined in
		  <filename>'springapp-servlet.xml'</filename>.</para>
		</listitem>			
    </orderedlist>
	  
    <para>Find below a screenshot of what your project directory structure
    must look like after following the above instructions.</para>
    <screenshot>
		<mediaobject>
			<imageobject role="fo">
				<imagedata fileref="images/dir-structure-endp2.png" format="PNG" align="center" />
			</imageobject>
			<imageobject role="html">
				<imagedata fileref="images/dir-structure-endp2.png" format="PNG" align="center" />
			</imageobject>
			<caption>
				<para>The project directory structure at the end of part 2</para>
			</caption>
		</mediaobject>
	</screenshot>
	  
  </section>			
	
</chapter>

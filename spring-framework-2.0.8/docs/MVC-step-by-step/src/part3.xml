<?xml version="1.0" encoding="UTF-8"?>
<chapter id="part3">
  <title>Developing the Application</title>

  <para>This is Part 3 of a step-by-step tutorial on how to develop a Spring
  application. In this section, we will adopt a pragmatic Test-Driven
  Development (TDD) approach for creating the domain objects and implementing
  the business logic for our <link
  linkend="overview-application-overview">inventory management system</link>.
  This means we'll "code a little, test a little, code some more then test
  some more". In <link linkend="part1">Part 1</link> we configured the
  environment and set up a basic application. In <link linkend="part2">Part
  2</link> we refined the application by decoupling the view from the
  controller.</para>

  <para>Spring is about making simple things easy and the hard things
  possible. The fundamental construct that makes this possible is Spring's use
  of <literal>Plain Old Java Objects (POJOs). </literal> POJOs are essentially
  plain old Java classes free from any contract usually enforced by a
  framework or component architecture through subclassing or the
  implementation of interfaces. POJOs are plain old objects that are free from
  such constraints, making object-oriented programming possible once again.
  When you are working with Spring, the domain objects and services you
  implement will be POJOs. In fact, almost everything you implement should be
  a POJO. If it's not, you should be sure to ask yourself why that is. In this
  section, we will begin to see the simplicity and power of Spring.</para>

  <section id="step3.1">
    <title>Review the business case of the Inventory Management System</title>

    <para>In our inventory management system, we have the concept of a product
    and a service for handling them. In particular, the business has requested
    the ability to increase or decrease prices across all products. The
    validation rules for price increase are:</para>

    <itemizedlist>
      <listitem>
        <para>The maximum increase amount is 100%.</para>
      </listitem>

      <listitem>
        <para>The minimum increase amount is 1%.</para>
      </listitem>

      <listitem>
        <para>The maximum decrease amount 100%.</para>
      </listitem>

      <listitem>
        <para>The minimum decrease amount is 1%.</para>
      </listitem>
    </itemizedlist>

    <para>The business has also said that they want to syndicate the system to
    several large supermarkets, with one website for each company so that a
    company can specify the discounts they want to set for the
    products.</para>

    <para>Find below a class diagram of our inventory management
    system.</para>

    <screenshot>
      <mediaobject>
        <imageobject role="fo">
          <imagedata align="center"
                     fileref="images/inventory-system-classdiagram.png"
                     format="PNG" />
        </imageobject>

        <imageobject role="html">
          <imagedata align="center"
                     fileref="images/inventory-system-classdiagram.png"
                     format="PNG" />
        </imageobject>

        <caption><para>The class diagram for the inventory management
        system</para></caption>
      </mediaobject>
    </screenshot>
  </section>

  <section id="step3.2">
    <title>Add some classes for business logic</title>

    <para>Let's now add some business logic in the form of a
    <classname>Product</classname> class and a service called
    <interfacename>ProductManager</interfacename> service that will manage all
    the products. In order to separate the web dependent logic from the
    business logic, we will place classes related to the web tier in the
    <literal>'web'</literal> package and create two new packages: one for
    service objects called <literal>'service'</literal> and another for domain
    objects called <literal>'domain'</literal>.</para>

    <para>First we implement the <classname>Product</classname> class as a
    POJO with a default constructor (automatically provided if we don't
    specify any constructors) and getters and setters for its properties
    <literal>'description'</literal> and <literal>'price'</literal>. Let's
    also make it <interfacename>Serializable</interfacename>, not necessary
    for our application, but could come in handy later on when we persist and
    store its state. The class is a domain object, so it belongs in the
    <literal>'domain'</literal> package.</para>

    <para><filename>'springapp/src/springapp/domain/Product.java'</filename>:</para>

    <programlisting>package springapp.domain;

import java.io.Serializable;

public class Product implements Serializable{

    private String description;
    private Double price;
    
    public String getDescription() {
        return description;
    }
    
    public void setDescription(String description) {
        this.description = description;
    }
    
    public Double getPrice() {
        return price;
    }
    
    public void setPrice(Double price) {
        this.price = price;
    }
    
    public String toString() {
        StringBuffer buffer = new StringBuffer();
        buffer.append("Description: " + description + ";");
        buffer.append("Price: " + price);
        return buffer.toString();
    }
}</programlisting>

    <para>Now we write the unit tests for our <classname>Product</classname>
    class. Some developers don't bother writing tests for getters and setters
    or so-called 'auto-generated' code. It usually takes much longer to engage
    in the debate (as this paragraph demonstrates) on whether or not getters
    and setters need to be unit tested as they're so 'trivial'. We write them
    because: a) they are trivial to write; b) having the tests pays dividends
    in terms of the time saved for the one time out of a hundred you may be
    caught out by a dodgy getter or setter; and c) they improve test coverage.
    We create a <classname>Product</classname> stub and test each getter and
    setter as a pair in a single test. Usually, you will write one or more
    test methods per class method, with each test method testing a particular
    condition in a class method such as checking for a
    <methodname>null</methodname> value of an argument passed into the
    method.</para>

    <para><filename>'springapp/test/springapp/domain/ProductTests.java'</filename>:</para>

    <programlisting>package springapp.domain;

import junit.framework.TestCase;

public class ProductTests extends TestCase {

    private Product product;

    protected void setUp() throws Exception {
        product = new Product();
    }

    public void testSetAndGetDescription() {
        String testDescription = "aDescription";
        assertNull(product.getDescription());
        product.setDescription(testDescription);
        assertEquals(testDescription, product.getDescription());
    }

    public void testSetAndGetPrice() {
        double testPrice = 100.00;
        assertEquals(0, 0, 0);    
        product.setPrice(testPrice);
        assertEquals(testPrice, product.getPrice(), 0);
    }
  
}</programlisting>

    <para>Next we create the <interfacename>ProductManager</interfacename>.
    This is the service responsible for handling products. It contains two
    methods: a business method <methodname> increasePrice()</methodname> that
    increases prices for all products and a getter method
    <methodname>getProducts()</methodname> for retrieving all products. We
    have chosen to make it an interface instead of a concrete class for an
    number of reasons. First of all, it makes writing unit tests for
    <literal>Controllers</literal> easier (as we'll see in the next chapter).
    Secondly, the use of interfaces means JDK proxying (a Java language
    feature) can be used to make the service transactional instead of CGLIB (a
    code generation library).</para>

    <para><filename>'springapp/src/springapp/service/ProductManager.java'</filename>:</para>

    <programlisting>package springapp.service;

import java.io.Serializable;
import java.util.List;

import springapp.domain.Product;

public interface ProductManager extends Serializable{

    public void increasePrice(int percentage);
    
    public List&lt;Product&gt; getProducts();
    
    public void setProducts(List&lt;Product&gt; products);    
    
}</programlisting>

    <para>Let's create the <classname>SimpleProductManager</classname> class
    that implements the <classname>ProductManager</classname>
    interface.</para>

    <para><filename>'springapp/src/springapp/service/SimpleProductManager.java'</filename>:</para>

    <programlisting>package springapp.service;

import java.util.List;

import springapp.domain.Product;

public class SimpleProductManager implements ProductManager {

    public List&lt;Product&gt; getProducts() {
        throw new UnsupportedOperationException();
    }

    public void increasePrice(int percentage) {
        throw new UnsupportedOperationException();        
    }

    public void setProducts(List&lt;Product&gt; products) {
        throw new UnsupportedOperationException();        
    }

}</programlisting>

    <para>Before we implement the methods in
    <classname>SimpleProductManager</classname>, we're going to define some
    tests first. The strictest definition of <literal>Test Driven Development
    </literal> (TDD) is to always write the tests first, then the code. A
    looser interpretation of it is more akin to <literal>Test Oriented
    Development</literal> (TOD), where we alternate between writing code and
    tests as part of the development process. The most important thing is for
    a codebase to have as complete a set of unit tests as possible, so how you
    achieve it becomes somewhat academic. Most TDD developers, however, do
    agree that the quality of tests is always higher when they are written at
    around the same time as the code that is being developed, so that's the
    approach we're going to take.</para>

    <para>To write effective tests, you have to consider all the possible pre-
    and post-conditions of a method being tested as well as what happens
    within the method. Let's start by testing a call to
    <methodname>getProducts()</methodname> returns
    <literal>null</literal>.</para>

    <para><filename>'springapp/test/springapp/service/SimpleProductManagerTests.java'</filename>:</para>

    <programlisting>package springapp.service;

import junit.framework.TestCase;

public class SimpleProductManagerTests extends TestCase {

    private ProductManager productManager;
        
    protected void setUp() throws Exception {
        productManager = new SimpleProductManager();
    }

    public void testGetProductsWithNoProducts() {
        productManager = new SimpleProductManager();
        assertNull(productManager.getProducts());
    }

}</programlisting>

    <para>Rerun all the Ant <literal>tests</literal> target and the test
    should fail as <methodname>getProducts()</methodname> has yet to be
    implemented. It's usually a good idea to mark unimplemented methods by
    getting them to throw an
    <classname>UnsupportedOperationException</classname>.</para>

    <para>Next we implement a test for retrieving a list of stub products
    populated with test data. We know that we'll need to populate the products
    list in the majority of our test methods in
    <classname>SimpleProductManagerTests</classname>, so we define the stub
    list in JUnit's <methodname>setUp()</methodname>, a method that is invoked
    before each test method is called.</para>

    <para><filename>'springapp/test/springapp/service/SimpleProductManagerTests.java'</filename>:</para>

    <programlisting>package springapp.service;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import springapp.domain.Product;

import junit.framework.TestCase;

public class SimpleProductManagerTests extends TestCase {

    private ProductManager productManager;
    private List&lt;Product&gt; products;
    
    private static int PRODUCT_COUNT = 2;
    
    private static Double CHAIR_PRICE = new Double(20.50);
    private static String CHAIR_DESCRIPTION = "Chair";
    
    private static String TABLE_DESCRIPTION = "Table";
    private static Double TABLE_PRICE = new Double(150.10);         
        
    protected void setUp() throws Exception {
        productManager = new SimpleProductManager();
        products = new ArrayList&lt;Product&gt;();
        
        // stub up a list of products
        Product product = new Product();
        product.setDescription("Chair");
        product.setPrice(CHAIR_PRICE);
        products.add(product);
        
        product = new Product();
        product.setDescription("Table");
        product.setPrice(TABLE_PRICE);
        products.add(product);
        
        productManager.setProducts(products);
    }

    public void testGetProductsWithNoProducts() {
        productManager = new SimpleProductManager();
        assertNull(productManager.getProducts());
    }
    
    public void testGetProducts() {
        List&lt;Product&gt; products = productManager.getProducts();
        assertNotNull(products);        
        assertEquals(PRODUCT_COUNT, productManager.getProducts().size());
    
        Product product = products.get(0);
        assertEquals(CHAIR_DESCRIPTION, product.getDescription());
        assertEquals(CHAIR_PRICE, product.getPrice());
        
        product = products.get(1);
        assertEquals(TABLE_DESCRIPTION, product.getDescription());
        assertEquals(TABLE_PRICE, product.getPrice());      
    }   
}</programlisting>

    <para>Rerun all the Ant <literal>tests</literal> target and our two tests
    should fail.</para>

    <para>We go back to the <classname>SimpleProductManager</classname> and
    implement the getter and setter methods for the
    <classname>products</classname> property.</para>

    <para><filename>'springapp/src/springapp/service/SimpleProductManager.java'</filename>:</para>

    <programlisting>package springapp.service;

import java.util.ArrayList;
import java.util.List;

import springapp.domain.Product;

public class SimpleProductManager implements ProductManager {

    private List&lt;Product&gt; products;
    
    public List&lt;Product&gt; getProducts() {
        return products;
    }

    public void increasePrice(int percentage) {
        // TODO Auto-generated method stub      
    }

    public void setProducts(List&lt;Product&gt; products) {
        this.products = products;
    }
    
}</programlisting>

    <para>Rerun the Ant <literal>tests</literal> target and all our tests
    should pass.</para>

    <para>We proceed by implementing the following tests for the
    <methodname>increasePrice()</methodname> method:</para>

    <itemizedlist>
      <listitem>
        <para>The list of products is null and the method executes
        gracefully.</para>
      </listitem>

      <listitem>
        <para>The list of products is empty and the method executes
        gracefully.</para>
      </listitem>

      <listitem>
        <para>Set a price increase of 10% and check the increase is reflected
        in the prices of all the products in the list.</para>
      </listitem>

      <listitem>
        <para>Set a price decrease of 10% and check the increase is reflected
        in the prices of all the products in the list.</para>
      </listitem>
    </itemizedlist>

    <para><filename>'springapp/test/springapp/service/SimpleProductManagerTests.java'</filename>:</para>

    <programlisting>package springapp.service;

import java.util.ArrayList;
import java.util.List;

import springapp.domain.Product;

import junit.framework.TestCase;

public class SimpleProductManagerTests extends TestCase {

    private ProductManager productManager;
    private List&lt;Product&gt; products;
    
    private static int PRODUCT_COUNT = 2;
    
    private static Double CHAIR_PRICE = new Double(20.50);
    private static String CHAIR_DESCRIPTION = "Chair";
    
    private static String TABLE_DESCRIPTION = "Table";
    private static Double TABLE_PRICE = new Double(150.10);         
    
    private static int POSITIVE_PRICE_INCREASE = 10;
    private static int NEGATIVE_PRICE_INCREASE = -10;
    
    protected void setUp() throws Exception {
        productManager = new SimpleProductManager();
        products = new ArrayList&lt;Product&gt;();
        
        // stub up a list of products
        Product product = new Product();
        product.setDescription("Chair");
        product.setPrice(CHAIR_PRICE);
        products.add(product);
        
        product = new Product();
        product.setDescription("Table");
        product.setPrice(TABLE_PRICE);
        products.add(product);
        
        productManager.setProducts(products);
    }

    public void testGetProductsWithNoProducts() {
        productManager = new SimpleProductManager();
        assertNull(productManager.getProducts());
    }
    
    public void testGetProducts() {
        List&lt;Product&gt; products = productManager.getProducts();
        assertNotNull(products);        
        assertEquals(PRODUCT_COUNT, productManager.getProducts().size());
    
        Product product = products.get(0);
        assertEquals(CHAIR_DESCRIPTION, product.getDescription());
        assertEquals(CHAIR_PRICE, product.getPrice());
        
        product = products.get(1);
        assertEquals(TABLE_DESCRIPTION, product.getDescription());
        assertEquals(TABLE_PRICE, product.getPrice());      
    }   
    
    public void testIncreasePriceWithNullListOfProducts() {
        try {
            productManager = new SimpleProductManager();
            productManager.increasePrice(POSITIVE_PRICE_INCREASE);
        }
        catch(NullPointerException ex) {
            fail("Products list is null.");
        }
    }
    
    public void testIncreasePriceWithEmptyListOfProducts() {
        try {
            productManager = new SimpleProductManager();
            productManager.setProducts(new ArrayList&lt;Product&gt;());
            productManager.increasePrice(POSITIVE_PRICE_INCREASE);
        }
        catch(Exception ex) {
            fail("Products list is empty.");
        }           
    }
    
    public void testIncreasePriceWithPositivePercentage() {
        productManager.increasePrice(POSITIVE_PRICE_INCREASE);
        double expectedChairPriceWithIncrease = 22.55;
        double expectedTablePriceWithIncrease = 165.11;
        
        List&lt;Product&gt; products = productManager.getProducts();      
        Product product = products.get(0);
        assertEquals(expectedChairPriceWithIncrease, product.getPrice());
        
        product = products.get(1);      
        assertEquals(expectedTablePriceWithIncrease, product.getPrice());       
    }
    
    public void testIncreasePriceWithNegativePercentage() {     
        productManager.increasePrice(NEGATIVE_PRICE_INCREASE);
        double expectedChairPriceWithDecrease = 18.45;
        double expectedTablePriceWithDecrease = 135.09;
        
        List&lt;Product&gt; products = productManager.getProducts();      
        Product product = products.get(0);
        assertEquals(expectedChairPriceWithDecrease, product.getPrice());
        
        product = products.get(1);      
        assertEquals(expectedTablePriceWithDecrease, product.getPrice());       
    }
    
}</programlisting>

    <para>We return to <classname>SimpleProductManager</classname> to
    implement <methodname>increasePrice()</methodname>.</para>

    <para><filename>'springapp/src/springapp/service/SimpleProductManager.java'</filename>:</para>

    <programlisting>package springapp.service;

import java.util.List;

import springapp.domain.Product;

public class SimpleProductManager implements ProductManager {

    private List&lt;Product&gt; products;
    
    public List&lt;Product&gt; getProducts() {
        return products;
    }

    public void increasePrice(int percentage) {
        if (products != null) {
            for (Product product : products) {
                double newPrice = product.getPrice().doubleValue() * 
                                    (100 + percentage)/100;
                product.setPrice(newPrice);
            }
        }
    }
    
    public void setProducts(List&lt;Product&gt; products) {
        this.products = products;
    }
    
}</programlisting>

    <para>Rerun the Ant <literal>tests</literal> target and all our tests
    should pass. *HURRAH* JUnit has a saying: <quote>keep the bar green to
    keep the code clean.</quote> For those of you running the tests in an IDE
    and are new to unit testing, we hope you're feeling imbued with a sense of
    greater sense of confidence and certainty that the code is truly working
    as specified in the business rules specification and as you intend. I know
    I do.</para>

    <para>We're now ready to move back into the web layer to put a list of
    products into our <classname>Controller</classname> model.</para>
  </section>

  <section>
    <title>Summary</title>

    <para>Let's take quick look at what we did in Part 3.</para>

    <orderedlist>
      <listitem>
        <para>We implemented a domain object <classname>Product</classname>
        and a service interface <interfacename>ProductManager</interfacename>
        and concrete class <classname>SimpleProductManager </classname> all as
        POJOs.</para>
      </listitem>

      <listitem>
        <para>We wrote unit tests for all the classes we implemented.</para>
      </listitem>

      <listitem>
        <para>We didn't write a line of code to do with Spring. This is an
        example of how non-invasive the Spring Framework really is. One of its
        core aims is to enable developers to focus on tackling the most
        important task of all: to deliver value by modelling and implementing
        business requirements. Another of its aims is to make following best
        practices easy, such as implementing services using interfaces and
        unit testing as much as is pragmatic given project constraints. Over
        the course of this tutorial, you'll see the benefits of designing to
        interfaces come to life.</para>
      </listitem>
    </orderedlist>

    <para>Find below a screenshot of what your project directory structure
    must look like after following the above instructions.</para>

    <screenshot>
      <mediaobject>
        <imageobject role="fo">
          <imagedata align="center" fileref="images/dir-structure-endp3.png"
                     format="PNG" />
        </imageobject>

        <imageobject role="html">
          <imagedata align="center" fileref="images/dir-structure-endp3.png"
                     format="PNG" />
        </imageobject>

        <caption><para>The project directory structure at the end of part
        3</para></caption>
      </mediaobject>
    </screenshot>
  </section>
</chapter>